#!/usr/bin/env bash
#autoload -U gnu_generic_getopts
# -*- mode: sh -*-
function gnu_generic_getopts() {
  declare -p OPTIONS &>/dev/null || declare -gA OPTIONS=()
  declare -ga ARGUMENTS=() OPTIONS_ERROR=()

  if [[ "$1" == "-" ]]; then
    builtin declare -g HELP_MESSAGE
    IFS= builtin read -rd '' HELP_MESSAGE || true
    exec 6< <(builtin echo "$HELP_MESSAGE")
  else
    builtin declare app="${1:?The function parse_gnu_help requires a function/command which outputs the GNU-compatibled help message}";
    exec 6< <("$app")
  fi
  builtin shift

  if [[ "${1:-}" == "--help" ]]; then
      builtin shift
      OPTIONS[help]=true
      ARGUMENTS=("$@")
      IFS= builtin read -u 6 -rd '' HELP_MESSAGE || true
      builtin echo "$HELP_MESSAGE"
      builtin return 1
  fi

  if [[ $# -ge 1 ]] && [[ "$1" == "--shebang "?* ]]; then
      builtin declare -a args
      [[ -n "${BASH_VERSION:-}" ]] && builtin read -r -a args <<< "${1}"
      [[ -n "${ZSH_VERSION:-}" ]] && builtin read -r -A args <<< "${1}"
      builtin shift
      args+=("$@")
      set -- "${args[@]}"
  fi

  [[ "${1:-}" == "--shebang" ]] && builtin shift

  declare opt="" val="" optstring=""
  declare -a extra_long_opts
  declare -A options_map

  declare split="(\\ \\ |	|[[:blank:]]*\$)"
  declare name_regex='[a-zA-Z0-9][-_a-zA-Z0-9]*[a-zA-Z0-9]+'
  declare short_opt_regex="-[a-zA-Z0-9]"
  declare long_opt_regex="--$name_regex"
  declare single_arg_regex='[a-zA-Z0-9][^[:blank:]]*'
  declare args_regex="${single_arg_regex},?(\\[[^]]*\\.\\.\\.[^]]*\\])?"
  declare multi_args_regex="${single_arg_regex},?\\[[^]]*\\.\\.\\.[^]]*\\]"

  while builtin read -r -u 6 line; do
    declare short_opt='' long_opt='' opt_arg=''
    declare -a rematch=()
    if [[ "$line" =~ ^$short_opt_regex$split ]]; then
      #debug : -h : single opt: $line
      short_opt="${line%%  *}"
      short_opt="${short_opt%%	*}"
    elif [[ "$line" =~ ^$long_opt_regex$split ]]; then
      #debug : --help : long opt: $line
      long_opt="${line%%  *}"
      long_opt="${long_opt%%	*}"
    elif [[ "$line" =~ ^$short_opt_regex,\ $long_opt_regex$split ]]; then
      #debug : -h, --help : single and long opt: $line
      short_opt="${line%%, *}"
      long_opt="${line:4}"
      long_opt="${long_opt%%  *}"
      long_opt="${long_opt%%	*}"
    elif [[ "$line" =~ ^$short_opt_regex\ $args_regex$split ]]; then
      #debug : -d DOMAIN : single opt require argument: $line
      short_opt="${line%% *}"
      opt_arg="${line#* }"
    elif [[ "$line" =~ ^($long_opt_regex)(=| )($args_regex)$split ]]; then
      #debug : --tags=TAG[TAG,...] : long opt, require argument: $line
      if [[ -n "${BASH_VERSION:-}" ]]; then
        rematch=( "${BASH_REMATCH[@]}" )
      elif [[ -n "${ZSH_VERSION:-}" ]]; then
        rematch=( "${match[@]}" )
      fi
      long_opt="${rematch[1]}"
      opt_arg="${rematch[3]}"
    elif [[ "$line" =~ ^($short_opt_regex),\ ($long_opt_regex)(=| )($args_regex)$split ]]; then
      if [[ -n "${BASH_VERSION:-}" ]]; then
        rematch=( "${BASH_REMATCH[@]}" )
      elif [[ -n "${ZSH_VERSION:-}" ]]; then
        rematch=( "${match[@]}" )
      fi
      #debug : -t, --tags=TAG,[TAG,...] : single and long opt, require argument: $line
      short_opt="${rematch[1]}"
      long_opt="${rematch[2]}"
      opt_arg="${rematch[4]}"
    else
      builtin continue # non-option lines
    fi
    short_opt="${short_opt#-}"
    long_opt="${long_opt#--}"
    if [[ "$opt_arg" =~ ^$multi_args_regex$split ]]; then
      #debug multi: $opt_arg
      opt_arg="+"
    elif [[ "$opt_arg" =~ ^$single_arg_regex$split ]]; then
      #debug single: $opt_arg
      opt_arg="="
    fi

    if [[ -n "$long_opt" ]]; then
      options_map[${long_opt}]="${long_opt}${opt_arg}"
      [[ -n "$short_opt" ]] && options_map[$short_opt]="${long_opt}${opt_arg}"
    else
      options_map[$short_opt]="${short_opt}${opt_arg}"
    fi

    if [[ -n "$short_opt" ]]; then
      #info "short opt: ${short_opt}"
      optstring="${optstring}${short_opt}"
      [[ -n "$opt_arg" ]] && optstring="${optstring}:"
    elif [[ -n "$long_opt" ]]; then
      extra_long_opts+=("$long_opt")
    fi
    #[[ -n "$long_opt" ]] && info "long opt: ${long_opt}"
  done
  #echo ""
  #debug optstring="$optstring"
  #typeset -p extra_long_opts
  #debug "$(typeset -p options_map)"
  #info "$@"
  declare -a standard_params
  while param="${1:-}"; [[ -n "$param" ]]; do
    builtin shift
    if [[ "$param" == "--" ]]; then
      standard_params+=("--" "$@")
      break;
    elif [[ "$param" == "-"[a-zA-Z0-9]?* ]] && [[ "${options_map[${param:1:1}]:-}" != *[=+] ]]; then
      for (( i=1; i<${#param}; i++ )); do
        standard_params+=("-${param:$i:1}")
      done
    else
      standard_params+=("$param")
    fi
  done
  #debug "${standard_params[@]}"
  [[ -z "${standard_params:-}" ]] ||
      set -- "${standard_params[@]}"
  declare retval=0
  while param="${1:-}"; [[ -n "$param" ]]; do
    builtin shift
    declare val='' opt='' boolopt='' appendopt=''
    if [[ "$param" == "--" ]]; then
      ARGUMENTS+=("$@")
      break;
    elif [[ "$param" == "-"* ]]; then
      #debug "$param"
      opt="${param#-}"
      if [[ "${opt}" == "${opt#-}" ]] && [[ "${#opt}" -ge 2 ]]; then
        val="${opt#?}"
        opt="${opt:0:1}"
      else
        opt="${opt#-}"
      fi
      if [[ "$opt" == *"="* ]]; then
        val="${opt#*=}"
        opt="${opt%%=*}"
      fi
      declare optkey="${options_map[$opt]:-}"
      if [[ -z "$optkey" ]]; then
        errmsg="Invalid option \"$param\"."
        OPTIONS_ERROR+=("$errmsg")
        echo "$errmsg"
        val=""
        retval=1
      elif [[ "$optkey" == *[=+] ]]; then
        [[ -z "$val" ]] && val="${optkey:((${#optkey}-1)):1}"
        [[ "$optkey" == *"+" ]] && appendopt=yes
        optkey="${optkey%?}"
      else
        boolopt=yes
        [[ -z "$val" ]] && val=true
      fi
      if [[ -n "$boolopt" ]] && [[ -n "$val" ]]; then
        declare -l bval="$val"
        if [[ "$bval" == yes || "$bval" == true ]]; then
          val=true
        else
          val=false
        fi
      fi
      if [[ "$val" == [=+] ]]; then
        declare val="${1:-}"
        [[ "$val" == "-"* ]] && val=
        if [[ -z "$val" ]]; then
          optkey=
          errmsg="Option \"$param\" requires an argument."
          OPTIONS_ERROR+=("$errmsg")
          echo "$errmsg"
          retval=1
          #break
        else
          builtin shift
        fi
      fi
      [[ -n "$optkey" ]] && if [[ -n "$appendopt" ]] && [[ -n "${OPTIONS[$optkey]:-}" ]]; then
        OPTIONS[$optkey]="${OPTIONS[$optkey]},${val}"
      else
        OPTIONS[$optkey]="${val}"
      fi
      #debug "$OPTIONS[$optkey]=${val@Q}"
    else
      ARGUMENTS+=("${param}")
    fi
  done
  #declare -p OPTIONS >&2
  builtin return "$retval"
} >&2 2>/dev/null 8>/dev/null

[[ -z "${ZSH_VERSION:-}" ]] && builtin return

gnu_generic_getopts "$@"

# vi: set shiftwidth=2 :
# vi: set tabstop=2 :
# vi: set ft=sh :
